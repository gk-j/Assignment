/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs=require('fs');
  const app = express();
  
  app.use(bodyParser.json());

  function findIndex(arr, id) {
    for (let i = 0; i < arr.length; i++) {
      if (arr[i].id === id) return i;
    }
    return -1;
  }

  function removeAtIndex(arr, index) {
    let newArray = [];
    for (let i = 0; i < arr.length; i++) {
      if (i !== index) newArray.push(arr[i]);
    }
    return newArray;
  }
  
  app.get('/todos',(req,res)=>{
      fs.readFile("todos.json",'utf-8',(err,data)=>{
          if(err) throw err;
          res.json(JSON.parse(data));
      })
  })

  app.get('/todos/:id',(req,res)=>{
    const id=parseInt(req.params.id);
      fs.readFile("todos.json",'utf-8',(err,data)=>{
        if(err) throw err;
        const todos=JSON.parse(data);
        const todo=todos.find((todo)=>(todo.id==id));
        if(!todo){
          res.status(404).send("Not Found");
        }else{
          res.json(todo);
        }
      })
  })

  app.post('/todos',(req,res)=>{
      const {title,completed,description}=req.body;
      const todo={
          id: Math.floor(Math.random()*100000),
          title,
          completed,
          description
      };
      fs.readFile("todos.json",'utf-8',(err,data)=>{
          if(err) throw err;
          const todos=JSON.parse(data);
          todos.push(todo);
          fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
            if (err) throw err;
            res.status(201).json(todo);
          });
      })
  })
  
  app.put('/todos/:id',(req,res)=>{
    const id=parseInt(req.params.id);
    const {title,completed,description}=req.body;
    fs.readFile("todos.json",'utf-8',(err,data)=>{
        if(err) throw err;
        let todos=JSON.parse(data);
        let index=-1;
        for(let i=0;i<todos.length;i++){
            if(todos[i].id==id){
              index=i;
              break;
            }    
        };
        if(index==-1){
          res.status(404).send("Not Found");
        }else{
          const updatedTodo={
            id : todos[index].id,
            title,
            completed,
            description
          }
          todos[index]=updatedTodo;
          fs.writeFile("todos.json",JSON.stringify(todos),(err)=>{
            if(err) throw err
            res.status(200).json(updatedTodo);
          })
        }
    })
  })
  
  app.delete('/todos/:id', function(req, res) {

    fs.readFile("todos.json", "utf8", (err, data) => {
      if (err) throw err;
      let todos = JSON.parse(data);
      const todoIndex = findIndex(todos, parseInt(req.params.id));
      if (todoIndex === -1) {
        res.status(404).send();
      } else {
        todos = removeAtIndex(todos, todoIndex);
        fs.writeFile("todos.json", JSON.stringify(todos), (err) => {
          if (err) throw err;
          res.status(200).send();
        });
      }
    });
  });

  app.use((req,res,next)=>{
    res.status(404).send("not found")
  })

  // app.listen(3000);
  module.exports = app; 

  // app.get('/todos',(req,res)=>{
  //   res.json(todos);
  // })

  // app.get('/todos/:id',(req,res)=>{
  //   const id=parseInt(req.params.id);
  //   const todo=todos.find((todo)=>(todo.id==id));
  //   if(!todo){
  //     res.status(404).send("not found")
  //   }else{
  //     res.json(todo);
  //   }
    
  // })

  // app.post('/todos',(req,res)=>{
  //   const {title,completed,description}=req.body;
  //   const todo={
  //     id: todos.length+1,
  //     title,
  //     completed,
  //     description
  //   };
  //   todos.push(todo);
  //   res.status(201).send({id:todos.length});
  // })

  // app.put('/todos/:id',(req,res)=>{
  //   const id=parseInt(req.params.id);
  //   const {title,completed,description}=req.body;
  //   let index=-1;
  //   for(let i=0;i<todos.length;i++){
  //       if(todos[i].id==id){
  //         index=i;
  //         break;
  //       };
  //   };
  //   if(index==-1){
  //       res.status(404).send("not found")
  //   }else{
  //     todos[index].title=title;
  //     todos[index].completed=completed;
  //     todos[index].description=description;

  //     res.json(todos[index])
  //   };

  // });


  // app.delete('/todos/:id',(req,res)=>{
  //   const id=parseInt(req.params.id);
  //   const filteredList=todos.filter((todo)=>{
  //     return todo.id!=id;
  //   })
  //   if(filteredList.length==todos.length){
  //     res.status(404).send("not found")
  //   }else{
  //     todos=filteredList;
  //     res.send();
  //   }
  // })
